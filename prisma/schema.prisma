// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  posts         Post[]
  hobbies       UsersHobby[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Post {
  id        String   @id @default(uuid())
  title     String
  slug      String   @unique
  content   String
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  // authors   User[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index(slug)
}

model HobbyCategory {
  id          String      @id @default(uuid())
  title       String
  slug        String      @unique
  hobbies     HobbyType[]
  description String

  @@unique([id, slug])
  @@index(slug)
}

model HobbyType {
  id                 String         @id @default(uuid())
  title              String
  slug               String         @unique
  description        String
  category           HobbyCategory? @relation(fields: [hobbyCategoryId, hobbyCategoryTitle], references: [id, slug])
  hobbyCategoryId    String?
  hobbyCategoryTitle String
  UsersHobby         UsersHobby[]

  @@unique([id, slug])
  @@index(slug)
}

model UsersHobby {
  id             String     @id @default(uuid())
  hobbyType      HobbyType? @relation(fields: [hobbyTypeId, hobbyTypeTitle], references: [id, slug])
  hobbyTypeTitle String
  hobbyTypeId    String?
  User           User?      @relation(fields: [userId], references: [id])
  userId         String?
  level          Int        @default(0)
  rewards        String?
  achievements   String?
  cources        String?
  challenges     String?
  ambition       String?
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
